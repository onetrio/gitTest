1.预编译：添加包含的头文件，将定义的宏替换到代码
	gcc -E test.c -o test.i
	将文件test.c预编译输出到test.i
2.编译为汇编语言（Compilation）：
	gcc -S test.i -o test.s
	将程序编译为汇编语言
3.汇编（Assambly）：对于上一小节中生成的汇编代码文件test.s，gas汇编器负责将其编译为目标文件，如下：
	gcc -c test.s -o test.o
4.连接（linking）：负责将程序的目标文件与所需的所有附加的目标文件连接起来，最终生成可执行文件。附加的目标文件包括静态连接库和动态链接库。
	gcc test.o -o test

	
编译过程可分为6步：扫描（词法分析）、语法分析、语义分析、源代码优化、代码生成、目标代码优化。
	词法分析：扫描器（Scanner）将源代的字符序列分割成一系列的记号（Token）。lex工具可实现词法扫描。
	语法分析：语法分析器将记号（Token）产生语法树（Syntax Tree）。yacc工具可实现语法分析(yacc: Yet Another Compiler Compiler)。
	语义分析：静态语义（在编译器可以确定的语义）、动态语义（只能在运行期才能确定的语义）。
	源代码优化：源代码优化器(Source Code Optimizer)，将整个语法书转化为中间代码（Intermediate Code）（中间代码是与目标机器和运行环境无关的）。中间代码使得编译器被分为前端和后端。编译器前端负责产生机器无关的中间代码；编译器后端将中间代码转化为目标机器代码。
	目标代码生成：代码生成器(Code Generator).
	目标代码优化：目标代码优化器(Target Code Optimizer)。
 
链接的主要内容是把各个模块之间相互引用的部分处理好，使得各个模块之间能够正确地衔接。
链接的主要过程包括：地址和空间分配（Address and Storage Allocation），符号决议（Symbol Resolution），重定位（Relocation）等。
链接分为静态链接和动态链接。
静态链接是指在编译阶段直接把静态库加入到可执行文件中去，这样可执行文件会比较大。
而动态链接则是指链接阶段仅仅只加入一些描述信息，而程序执行时再从系统中把相应动态库加载到内存中去。
