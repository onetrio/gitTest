（一）自动变量　　
   什么是自动变量呢？自动变量就是指在函数内部定义使用的变量。他只是允许在定义他的函数内部使用它。在函数外的其他任何地方都不能使用的变量。自动变量是局部变量，即它的区域性是在定义他的函数内部有效。当然这说明自动变量也没有链接性，因为它也不允许其他的文件访问他。由于自动变量在定义他的函数的外面的任何地方都是不可见的，所以允许我们在这个函数外的其他地方或者是其他的函数内部定义同名的变量，他们之间不会发生冲突的。因为他们都有自己的区域性，而且它没有链接性（即：不允许其他的文件访问他的）。来看看自动量的持续性。计算机在执行这个函数的时候，创建并为它分配内存，当函数执行完毕返回后，自动变量就会被销毁。这个过程是通过一个堆栈的机制来实现的。为自动变量分配内存就压栈，而函数返回时就退栈。　　
（二）静态变量：　　
    静态变量与自动变量的本质区别是，静态变量并不像自动变量那样使用堆栈机制来使用内存。而是为静态变量分配固定的内存，在程序运行的整个过程中，它都会被保持，而不会不销毁。这就是说静态变量的持续性是程序运行的整个周期。这有利于我们共享一些数据。如果静态变量在函数内部定义，则它的作用域就是在这个函数内部，仅在这个函数内部使用它才有效，但是它不同于自动变量的，自动变量离开函数后就会被销毁，而静态变量不会被销毁。他在函数的整个运行周期内都会存在。在函数外面定义的变量为全局变量，工程内的所有文件都可以访问他，但是它在整个工程内只能定义一次，不能有重复的定义，不然就会发生错误，而其他的文件要想使用这个变量，必须用extern来声明这个变量，这个声明叫做引用声明。这一点很重要，如过你没有用extern 来声明在其他文件中已经定义的全局变量，就来使用它，就会发生错误，如果你只是想在定义他的文件中使用它，而不允许在其他的文件中使用它，那么就用关键字 static来在函数外面声明变量。这样这个变量在其他文件中将不可见，即它的连接性而内部链接。有一点是我们只得注意的像：如果你在函数外这样声明一个变量，const int a ; 变量a的连接性为内部链接，只能在定义他的文件内使用。还有如果你在定义静态变量的时候并没有给变量初始化，则静态变量将被自动初始化为0；　　
（三）寄存器变量:　　
    在c语言当中可以使用寄存器变量来优化程序的性能,最常见的是在一个函数体当中,将一个常用的变量声明为寄存器变量: register int ra; 如果可能的话,编译器就会为它分配一个单独的寄存器，在整个函数执行期间对这个变量的操作全都是对这个寄存器进行操作,这时候就不用频繁地去访存了,自然就提高了性能.但是寄存器变量不是强制性的,也就是,即使你使用register关键字去声明一个变量为寄存器变量，编译器还是有可能把它作为一个普通的变量而不是寄存器变量来使用的. 在我们写程序的过程当中,有时候会经常用到一个全局变量,如果能够把它作为寄存器变量来使用,显然可以提高程序的性能,特别是对于那些对性能要求比较高的程序(比如模拟器，虚拟机等).　　
（四）易失变量：　　
    volatile:(嵌入式程序员必须掌握的)volatile最初的意思是表示汽油容易挥发,在c中的作用大概有两点（1）表示变量是易失的,易变的. （2）强制访存操作,防止编译器去优化,告诉编译器每次必须去内存中取值,而不是从寄存器或者缓存.


全局变量与全局静态变量的区别：
(a）若程序由一个源文件构成时，全局变量与全局静态变量没有区别。
(b) 若程序由多个源文件构成时，全局变量与全局静态变量不同：全局静态变量使得该变量成为定义该变量的源文件所独享，即：全局静态变量对组成该程序的其它源文件是无效的。
(c) 具有外部链接的静态；可以在所有源文件里调用；除了本文件，其他文件可以通过extern的方式引用；

静态全局变量的作用：
（a）不必担心其它源文件使用相同变量名，彼此相互独立。
（b）在某源文件中定义的静态全局变量不能被其他源文件使用或修改。
(c) 只能在本文件中使用！具有内部链接的静态；不允许在其他文件里调用； 
